{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\comps\\Timer.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import Timer from \"./comps/Timer.svelte\";\n  export let name;\n  let timers = [\n    { name: \"a\", component: null },\n    { name: \"b\", component: null },\n    { name: \"c\", component: null },\n    { name: \"d\", component: null },\n    { name: \"e\", component: null }\n  ];\n\n  let currentIdx;\n  let defaultDuration = 30;\n  let defaultPreCountDuration = 3;\n  let defaultPreCountEnabled = false;\n  let autoAdvance = true;\n\n  onMount(() => {\n    currentIdx = 0;\n  });\n\n  function playNext() {\n    timers[currentIdx].component.start();\n  }\n  function resetAll() {\n    timers.forEach(x => x.component.reset());\n    currentIdx = 0;\n  }\n\n  function onTimerDone(index) {\n    currentIdx = (currentIdx + 1) % timers.length;\n    if (autoAdvance && index != timers.length - 1) {\n      playNext();\n    }\n  }\n\n  $: labelStart = \"GO\";\n</script>\n\n<style>\n  h1 {\n    text-align: center;\n    color: purple;\n  }\n  .wrap {\n    /* border: 1px solid black; */\n    display: flex;\n    flex-direction: column;\n    width: 300px;\n    align-items: stretch;\n    padding: 10px;\n    margin: auto;\n  }\n  button {\n    border-radius: 5px;\n  }\n  .reset {\n    height: 50px;\n  }\n  .start {\n    margin-top: 10px;\n    height: 100px;\n  }\n  input {\n    text-align: center;\n  }\n  .timerContainer {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n  .timer {\n    flex: 1;\n  }\n  .timerIndicator {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    margin-left: -20px;\n    border: 1px solid gray;\n  }\n  .marked {\n    background: gray;\n  }\n\n  .settings {\n    border: 1px solid gray;\n    border-radius: 4px;\n    margin: 5px;\n    padding: 5px;\n    /* display: flex;\n    flex-direction: column; */\n    display: grid;\n    grid-template: \"a a\";\n    grid-gap: 5px;\n  }\n  .settings>input[type=\"number\"]{\n    width: 100%;\n  }  \n</style>\n\n<div class=\"wrap\">\n  <!-- <h1>TIMER</h1> -->\n  <div class=\"settings\">\n\n    <label for=\"duration\">duration</label>\n    <input\n      name=\"duration\"\n      type=\"number\"\n      bind:value={defaultDuration}\n      placeholder=\"time in seconds\" />\n\n    <div>\n      <input type=\"checkbox\" bind:checked={defaultPreCountEnabled} />\n      precount\n    </div>\n\n    <input\n      disabled={!defaultPreCountEnabled}\n      name=\"duration\"\n      type=\"number\"\n      bind:value={defaultPreCountDuration}\n      placeholder=\"time in seconds\" />\n    <div style=\"grid-column: 1 / 3;\">\n      <input type=\"checkbox\" bind:checked={autoAdvance} />\n      <span>auto advance</span>\n    </div>\n  </div>\n\n  <button class=\"reset\" on:click={resetAll}>RESET</button>\n\n  {#each timers as timer, i}\n    <div class=\"timerContainer\">\n      <div class=\"timerIndicator\" class:marked={i <= currentIdx} />\n      <div class=\"timer\">\n        <Timer\n          clickable={false}\n          duration={defaultDuration}\n          preCount={defaultPreCountEnabled ? defaultPreCountDuration : 0}\n          bind:this={timers[i].component}\n          on:done={() => onTimerDone(i)} />\n      </div>\n    </div>\n  {/each}\n\n  <button class=\"start\" on:click={playNext}>{labelStart}</button>\n\n</div>\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let clickable = true;\r\n  export let duration = 20;\r\n  export let preCount = 0;\r\n\r\n  let started = false;\r\n\r\n  let time = duration;\r\n  let timer;\r\n\r\n  let beep = new Audio(\"./sounds/blip.mp3\");\r\n  let tick = new Audio(\"./sounds/tick.mp3\");\r\n\r\n  $: timeLabel = duration ? Math.ceil(time).toFixed() : \"---\";\r\n  $: {\r\n    time = duration;\r\n  }\r\n\r\n  function onButton() {\r\n    console.log(clickable);\r\n    if (!clickable) return;\r\n\r\n    if (started) stop();\r\n    else start();\r\n  }\r\n\r\n  export function reset() {\r\n    stop();\r\n    time = duration;\r\n  }\r\n\r\n  export function start() {\r\n    stop();\r\n    console.log(\"stating timer\");\r\n    let startTime = Date.now() + preCount * 1000;\r\n    let last = startTime;\r\n    started = true;\r\n    let preCountTime = 0;\r\n    let lastPreCount=preCount;\r\n    timer = setInterval(() => {\r\n      if (started) {\r\n        let now = Date.now();\r\n\r\n        if (preCount > 0 && now < startTime) {\r\n          preCountTime = (startTime - now) / 1000;\r\n          time =preCountTime;\r\n          if (Math.ceil(lastPreCount) > Math.ceil(preCountTime) && preCountTime > 0) {\r\n            tick.play();\r\n          }\r\n          lastPreCount = preCountTime;          \r\n        } else {\r\n          time = duration - (now - startTime) / 1000;\r\n          if (Math.ceil(last) > Math.ceil(time) && time > 0) {\r\n            tick.play();\r\n          }\r\n          last = time;\r\n\r\n          if (time <= 0) {\r\n            beep.play();\r\n            time = 0;\r\n            stop();\r\n            dispatch(\"done\");\r\n          }\r\n        }\r\n      }\r\n    }, 10);\r\n  }\r\n  export function stop() {\r\n    clearInterval(timer);\r\n    started = false;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    padding: 5px;\r\n    user-select: none;\r\n  }\r\n  .clickable {\r\n    cursor: pointer;\r\n  }\r\n  .time {\r\n    display: inline-block;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n\r\n    /* border: 2px solid gray; */\r\n    border-radius: 2px;\r\n    color: white;\r\n    font-weight: bold;\r\n    background: lightgray;\r\n    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.1);\r\n\r\n    padding: 1px 5px;\r\n    text-align: center;\r\n    font-size: 25px;\r\n  }\r\n\r\n  .time.running {\r\n    background: green;\r\n  }\r\n\r\n  .time.done {\r\n    background: rosybrown;\r\n  }\r\n</style>\r\n\r\n<!-- markup (zero or more items) goes here -->\r\n<div class=\"container\" class:clickable on:click={onButton}>\r\n  <span class=\"time\" class:done={time <= 0} class:running={started}>\r\n    {timeLabel}\r\n  </span>\r\n  <!-- <button on:click={onButton}>{label}</button> -->\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AA6CE,KAAK,cAAC,CAAC,AAEL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,OAAO,CACpB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,AACd,CAAC,AACD,MAAM,cAAC,CAAC,AACN,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,AACd,CAAC,AACD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,IAAI,CAAE,CAAC,AACT,CAAC,AACD,eAAe,cAAC,CAAC,AACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,KAAK,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AACD,OAAO,cAAC,CAAC,AACP,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,GAAG,CAGZ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,KAAK,CACpB,QAAQ,CAAE,GAAG,AACf,CAAC,AACD,uBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,eAAC,CAAC,AAC7B,KAAK,CAAE,IAAI,AACb,CAAC;ACtBD,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,GAAG,CACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,UAAU,CACtB,KAAK,CAAE,IAAI,CAGX,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,SAAS,CACrB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAE1C,OAAO,CAAE,GAAG,CAAC,GAAG,CAChB,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,KAAK,QAAQ,cAAC,CAAC,AACb,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,KAAK,KAAK,cAAC,CAAC,AACV,UAAU,CAAE,SAAS,AACvB,CAAC"
}